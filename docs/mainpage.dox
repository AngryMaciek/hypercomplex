/*! \mainpage notitle
 *
 * \section intro_sec Introduction
 *
 * The following library aims to deliver a simple method to construct
 * hypercomplex numbers from any of the Cayley-Dickson algebras.
 * It supports calculations in an arbitrary-precise arithmetic
 * as well as encryption/decryption procedures for public-key
 * lattice-based cryptosystems in high-dimensional algebras of truncated
 * polynomial rings.
 * The library is dedicated mostly to computational mathematicians and computational scientists
 * whose focus is (post-quantum) cryptography and precise computation. 
 * As a header-only C++ template code it's greatest advantage is the combination of
 * speed, generic programming and convenience for the end user, making it
 * well suited for wide range of computationally challenging projects.
 * 
 * \section install_sec Installation
 *
 * As a prerequisite it is essential to install the 
 * <a href="https://www.mpfr.org/">MPFR library</a> first.
 * This should be rather straightforward with the following commands:
 * \code
 * # Linux (apt-get package manager)
 * sudo apt-get update -y
 * sudo apt-get install -y libmpfr-dev
 *
 * # macOS (Homebrew package manager)
 * brew update
 * brew install mpfr
 * \endcode
 *
 * The following is a _header-only_ library, meaning that the easiest way to use it
 * is to copy the core _hpp_ file alongside the main program and include it into the code
 * with the directive:
 * \code{.cpp}
 * #include "Hypercomplex.hpp"
 * \endcode
 *
 * Remember to specify a proper langauge standard for the compiler as well as
 * linking with _GNU MP_ and _GNU MPFR_ libraries, as in the command below:
 * \code
 * g++ --std=c++17 test.cpp -o test -lmpfr -lgmp
 * \endcode
 * 
 *
 *
 * \section usecase_sec Brief overview
 *
 * The following section demonstrates general functionality and behaviour of the library.
 * For the full unit test suite please refer to 
 * <a href="https://github.com/AngryMaciek/hypercomplex/blob/master/.test/unit/test.cpp">this file</a>.
 *
 * Please note that throughout this whole documentation many links may point
 * to the main template _Hypercomplex_ class instead of its specialisations.
 * This is because the doxygen engine unfortunately cannot distinguish
 * between template classes of the same name properly. Always check the description carefully while accessing
 * links at this page.
 *
 * Let us construct two hypercomplex numbers from an algebra obtained with the Cayley-Dickson process.
 * For simplicity of the presentation we will focus on quaternions.
 *
 *
 * \f$ H_1=(1,0,-0.5,5)\f$
 *
 * \f$ H_2=(-2,-4,-6,0)\f$
 *
 * \code{.cpp}
 *   double arr1[4] = {1.0,0.0,-0.5,5.0};
 *   Hypercomplex<double, 4> H1(arr1);
 *   std::cout << "H1 = " << H1 << std::endl;
 *
 *   double arr2[4] = {-2.0,-4.0,-6.0,0.0};
 *   Hypercomplex<double, 4> H2(arr2);
 *   std::cout << "H2 = " << H2 << std::endl;
 * \endcode
 *
 * The code above results in:
 * \code
 * H1 = 1 0 -0.5 5
 * H2 = -2 -4 -6 0
 * \endcode
 *
 * For every hypercomplex number we may extract its' real as well as imaginary part:
 *
 * \f$Re(H) := (H^{(0)}, 0, 0, 0, \dotsc)\f$
 *
 * \f$Im(H) := (0, H^{(1)}, H^{(2)}, H^{(3)}, \dotsc)\f$
 *
 * Therefore the commands:
 * \code{.cpp}
 *   std::cout << "Re(H1) = " << Re(H1) << std::endl;
 *   std::cout << "Im(H1) = " << Im(H1) << std::endl;
 * \endcode
 *
 * yield:
 * \code
 * Re(H1) = 1 0 0 0
 * Im(H1) = 0 0 -0.5 5
 * \endcode
 *
 * In case you already forgot what the dimensionality of our objects is, don't worry - we got your back.
 * Asking the right questions...
 *
 * \code{.cpp}
 *   std::cout << "dim(H1) = " << H1._() << std::endl;
 * \endcode
 *
 * ...leads to right answers:
 *
 * \code
 *   dim(H1) = 4
 * \endcode
 *
 * It would be very nice if we could access the components directly... But we can!
 * \code{.cpp}
 *   std::cout << "H2(2) = " << H2[2] << std::endl;
 * \endcode
 *
 * results in:
 *
 * \code
 *   H2(2) = -6
 * \endcode
 *
 * Do you wish you could represent your objects in different systems?
 * Nothing easier than that.
 * Embedding lower-dimensional hypercomplex numbers into higher dimensional algebras is a piece of cake!
 * \code{.cpp}
 *   std::cout << "Oct(H1) = " << H1.expand<8>() << std::endl;
 * \endcode
 *
 * The template method above creates a new class instance, printed below:
 *
 * \code
 *   Oct(H1) = 1 0 -0.5 5 0 0 0 0
 * \endcode
 *
 * For every hypercomplex number we might calculate its' Euclidean norm:
 *
 * \f$||H||_2 := \sqrt{H^{(0)}\times H^{(0)} + \dotsc + H^{(n-1)} \times H^{(n-1)} }\f$
 *
 * Luckily, there is a function dedicated to this operation:
 * \code{.cpp}
 *   std::cout << "||H2|| = " << H2.norm() << std::endl;
 * \endcode
 *
 * It returns value of the same type as the template type for the base class:
 *
 * \code
 *   ||H2|| = 7.48331
 * \endcode
 *
 * Having defined a norm for every non-zero hypercomplex number we may
 * calculate its' inverse according to the following formula:
 * \f$H^{-1} = \frac{\bar{H}}{||H||_2^2}\f$
 *
 * Calling a class method...
 * \code{.cpp}
 *   std::cout << "H2^-1 = " << H2.inv() << std::endl;
 * \endcode
 *
 * ...creates a new class instance:
 * \code
 *   H2^-1 = -0.0357143 0.0714286 0.107143 -0
 * \endcode
 *
 * Arithmetic operations on hypercomplex numbers are not complicated at all.
 * * Addition is carried out over respective elements:  
 *   \f$\forall_{H_A, H_B}: [H_A+H_B]^{(i)} := H_A^{(i)} + H_B^{(i)}\f$
 * * Subtraction is carried out over respective elements:  
 *   \f$\forall_{H_A, H_B}: [H_A-H_B]^{(i)} := H_A^{(i)} - H_B^{(i)}\f$
 * * A general formula for multiplication of hypercomplex numbers may be derived as follows:  
 *   Let \f$H_A\f$ and \f$H_B\f$ be elements from a Cayley-Dickson algebra of dimension \f$2^n\f$.  
 *   Both numbers may be interpreted as ordered pairs of elements from a \f$2^{(n-1)}\f$-dimensional algebra: \f$H_A = (a,b)\f$ and \f$H_B = (c,d)\f$.  
 *   Such a representation yields a recursive multiplication algorithm:  
 *   \f$H_A \times H_B = (a,b)(c,d) := (ac-\bar{d}b,da+b\bar{c})\f$.  
 *   (Multiplication of hypercomplex numbers is indeed implemented as a recursive operator with the base condition of multiplying real numbers.)  
 *   **Disclaimer:** Various distinct definitions of the multiplication formula exist:
 *   <a href="https://en.wikipedia.org/wiki/Cayley%E2%80%93Dickson_construction">here</a>,
 *   <a href="https://ncatlab.org/nlab/show/Cayley-Dickson+construction">here</a> or 
 *   <a href="http://www.zipcon.net/~swhite/docs/math/quaternions/Cayley-Dickson.html">here</a>.  
 *   They all lead to a proper norm upon multiplying a number with it's conjugate and the choice is arbitrary (feel free to modify the code, if needed).  
 *   In addition to the overloaded operator, hypercomplex multiplication is also available as a class method.  
 *   Depending on the dimenion of algebra and compiler's optimisation settings it could be 5-50x faster than the overloaded operator.  
 * * Knowing that inverse elements of hypercomplex numbers exist a division operation is implementat as a multiplication with an inverse of the right operand:  
 *   Let \f$H_A\f$ and \f$H_B\f$ be elements from a Cayley-Dickson algebra of dimension \f$2^n\f$, \f$H_B \neq 0\f$.  
 *   \f$\frac{H_A}{H_B} := H_A \times H_B^{-1}\f$  
 *   Notice the order of the operands, as commutativity is no longer a given.
 *
 * To test these operations we may execute the code below:
 * \code{.cpp}
 *   std::cout << "H1 + H2 = " << H1 + H2 << std::endl;
 *   std::cout << "H1 - H2 = " << H1 - H2 << std::endl;
 *   std::cout << "H1 * H2 = " << H1 * H2 << std::endl;
 *   std::cout << "H1 / H2 = " << H1 / H2 << std::endl;
 * \endcode
 *
 * Obtained output should match:
 * \code
 *   H1 + H2 = -1 -4 -6.5 5
 *   H1 - H2 = 3 4 5.5 5
 *   H1 * H2 = -5 26 -25 -12
 *   H1 / H2 = 0.0178571 -0.464286 0.482143 -0.142857
 * \endcode
 *
 * Moreover, one can easily raise a hypercomplex number to a natural power: \f$(H^n, n\in N)\f$.
 * This operation is implemented simply as an iterative multiplication:
 *
 * \f$H^n := (\dotsc((H \times H) \times H)\dotsc)\f$
 *
 * Please note that the products are evaluated from LHS to RHS.
 * However, all Cayley-Dickson algebras are power-associative therefore it does not really matter.
 *
 * Calling:
 * \code{.cpp}
 *   std::cout << "H2^4 = " << (H2^4) << std::endl;
 * \endcode
 *
 * Produces:
 * \code
 *   H2^4 = 1472 -1536 -2304 0
 * \endcode
 *
 * Last, but not least: our little cherry on top. A very special function linked to the magical Euler number - hypercomplex exponentiation:
 *
 * \f$e^H = e^{Re(H)+Im(H)} := e^{Re(H)} \times (cos||Im(H)||_2 + \frac{Im(H)}{||Im(H)||_2} \times sin||Im(H)||_2)\f$
 *
 * Regardless of the algebra hypercomplex numbers in the equation above are multiplied by scalars,
 * therefore associativity and commutativity still holds for these formulas.  
 * For that reason the exponentiation function is highly optimized,
 * implemented efficiently with as few operations and variables as possible.
 *
 * Finally, we validate it with:
 * \code{.cpp}
 *   std::cout << "e^H1 = " << exp(H1) << std::endl;
 * \endcode
 *
 * and get:
 * \code
 *   e^H1 = 0.83583 -0 0.257375 -2.57375
 * \endcode
 *
 * \section mpfr_sec Arbitrary-precision arithmetic
 *
 * Calculations on _MPFR_ types are availabla via partial template specialisation
 * (meaning that the _hpp_ file already includes the necessary header and the user should not include it again).
 * It is strongly advised to read the <a href="https://www.mpfr.org/mpfr-current/mpfr.pdf">library manual</a> beforehand
 * (sections 1 and 4 as a must-read). Please do not mix this library with another _MPFR_-dependant
 * code in the same translation unit.
 * 
 * We start with setting a global precision for all objects.
 * \code{.cpp}
 *   set_mpfr_precision(200);
 * \endcode
 *
 * What follows is an initialization of 8 _MPFR_ variables in a single array:
 * \code{.cpp}
 *   mpfr_t A[8];
 *   mpfr_init2(A[0], get_mpfr_precision());
 *   mpfr_init2(A[1], get_mpfr_precision());
 *   mpfr_init2(A[2], get_mpfr_precision());
 *   mpfr_init2(A[3], get_mpfr_precision());
 *   mpfr_init2(A[4], get_mpfr_precision());
 *   mpfr_init2(A[5], get_mpfr_precision());
 *   mpfr_init2(A[6], get_mpfr_precision());
 *   mpfr_init2(A[7], get_mpfr_precision());
 *   mpfr_set_d(A[0], 1.5, MPFR_RNDN);
 *   mpfr_set_d(A[1], 2.5, MPFR_RNDN);
 *   mpfr_set_d(A[2], 0.0, MPFR_RNDN);
 *   mpfr_set_d(A[3], -1.5, MPFR_RNDN);
 *   mpfr_set_d(A[4], 0.5, MPFR_RNDN);
 *   mpfr_set_d(A[5], -0.5, MPFR_RNDN);
 *   mpfr_set_d(A[6], -0.5, MPFR_RNDN);
 *   mpfr_set_d(A[7], -1.5, MPFR_RNDN);
 * \endcode
 *
 * Let us create an octonion composed of these numbers:
 * \code{.cpp}
 *   Hypercomplex<mpfr_t, 8> Hx(A);
 * \endcode
 *
 * To print the first element of our number after raising it to the 30-th power we need to use
 * library specific function:
 * \code{.cpp}
 *   std::cout << "Hx^30 = ";
 *   mpfr_out_str(stdout, 10, 0, (Hx^30)[0], MPFR_RNDN);
 *   std::cout << std::endl;
 * \endcode
 *
 * In result we obtain:
 * \code
 *   Hx^30 = -1.1841044160704622190868522692471742630004882812500000000000000e17
 * \endcode
 *
 * After all the calculations it is essential to clear constructed objects from the memory manually:
 * \code{.cpp}
 *   mpfr_clear(A[0]);
 *   mpfr_clear(A[1]);
 *   mpfr_clear(A[2]);
 *   mpfr_clear(A[3]);
 *   mpfr_clear(A[4]);
 *   mpfr_clear(A[5]);
 *   mpfr_clear(A[6]);
 *   mpfr_clear(A[7]);
 * \endcode
 *
 * Also, following that, to call a wrapper function which 
 * cleans all internally-reserved memory:
 * \code{.cpp}
 *   clear_mpfr_memory();
 * \endcode
 *
 * All the code specified up to this point may be executed upon compilation of
 * <a href="https://github.com/AngryMaciek/hypercomplex/blob/master/.test/docs/test.cpp">this source code</a>.
 *
 * \section crypto_sec Cryptographic Application
 *
 * The main feature of _Hypercomplex_ is an implementation of
 * cryptographic operations as in <a href="https://en.wikipedia.org/wiki/NTRUEncrypt">NTRU cryptosystem</a>
 * but generalized on an arbitrary-high-dimensional algebras generated with the Cayley-Dickson construction.
 * The library provides additional helper class for truncated polynomials
 * (with necessary operators e.g. modular reduction, convolution-multiplication)
 * and a partial template specialisation for hypercomplex numbers based on these objects.
 *
 * Briefly, let \f$N, p, q\f$ denote three selected primes such that \f$p << q\f$.
 * The former will become a multiplicative order whereas the two latter will mark
 * characteristics of the structures we will work on.
 * Let \f$R = \mathbb{Z}[x] / (x^N - 1)\f$ be the underlying polynomial quotient ring
 * (\f$R_p, R_q\f$ are modular structures, modulo \f$p,q\f$ respectively)
 * and \f$D\f$ mark the dimension of the algebra we operate in:
 * \f$A = \{x_0 + \sum^{D-1}_{i=1} x_i \cdot e_i | x_i \in R\} \f$, where
 * all \f$e_i\f$ are imaginary basis elements (similarly for modular algebras: \f$A_p, A_q\f$).
 *
 * Mathematical derivations for these structures and their operations
 * are analogous to those presented for
 * <a href="https://eprint.iacr.org/2009/386.pdf">QTRU</a>
 * and
 * <a href="https://www.math.uci.edu/~brusso/cryptographyORTU.pdf">OTRU</a>.
 *
 * Imagine that Alice wishes to send a message to Bob.
 * Bob chooses \f$F \in A\f$ such that
 * \f$F_p^{-1} \in A_p\f$ and \f$F_q^{-1} \in A_q\f$ exist, then
 * generates his public key for the cryptosystem:
 *
 * \f$ H = F_q^{-1} \times G \mod q\f$
 *
 * Alice chooses a "blinding element" \f$\Phi \in A_q\f$ and
 * encrypts her top secret message \f$M\f$ as:
 *
 * \f$ E = (p \cdot H \times \Phi + M) \mod q\f$
 *
 * Which Bob then decrypts with the following operations:
 *
 * \f$ C_1 = ((F \times E) \times F) \mod q\f$
 *
 * \f$ C_2 = C_1 \mod p\f$
 *
 * \f$ C_3 = (F_p^{-1} \times (C_2 \times F_p^{-1})) \mod p\f$
 *
 * If the decryption was successfull Bob receives \f$ C_3 = M\f$
 * (up to coefficients' centered lift)
 *
 * Please remember that lattice-based cryptography is always burdened with a chance
 * of decryption failure due to incorrect recovery of polynomial's coefficients
 * at the centered lift step.
 *
 * With a simple example of how to create a hypercomplex number based on
 * truncated polynomials...
 * \code{.cpp}
 *   int64_t X_array1[] = {2, 1, 1, 0, 2};
 *   int64_t X_array2[] = {2, 2, 2, 1, 2};
 *   Polynomial<5> X_polynomial1(X_array1);
 *   Polynomial<5> X_polynomial2(X_array2);
 *   Polynomial<5> X_coefficients[] = { X_polynomial1, X_polynomial2 };
 *   Hypercomplex<Polynomial<5>, 2> X(X_coefficients);
 * \endcode
 *
 * ... the scheme presented above may be implemented with the following functions of the library:
 *
 * \code{.cpp}
 *   # Having defined: p, q, MaxDeg, dim, F, G, M, PHI
 *
 *   # PUBLIC KEY
 *   CenteredLift(&F, p);
 *   CenteredLift(&G, p);
 *   Hypercomplex<Polynomial<MaxDeg>, dim> H = PUBLICKEY(F, G, q);
 *
 *   # ENCRYPTION
 *   CenteredLift(&PHI, p);
 *   Hypercomplex<Polynomial<MaxDeg>, dim> E = ENCRYPT(H, M, PHI, p, q);
 *
 *   # DECRYPTION
 *   Hypercomplex<Polynomial<MaxDeg>, dim> C = DECRYPT(F, E, p, q);
 * \endcode
 *
 * Remarkably, for a cryptosystem based on an algebra of \f$D \geq 16\f$ dimensions
 * \f$F\f$ needs to contain at most one \f$ x_i \in R | x_i \neq 0\f$.
 * This is because sedonions (and higher)
 * are not associative, thus the decryption process will only be possible
 * for a specific, reduced subset of private keys.
 *
 * Cryptographic applications of _Hypercomplex_ have been extensively tested in the
 * test case: _Cryptosystem based on Cayley-Dickson Algebras_ of the
 * <a href="https://github.com/AngryMaciek/hypercomplex/blob/master/.test/unit/test.cpp">following file</a>.
 *
 * All tests underlying Figure 1 in the publication are available
 * <a href="https://github.com/AngryMaciek/hypercomplex/blob/master/.test/docs/test.cpp">here</a>.
 *
 */
